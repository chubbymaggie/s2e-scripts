#!/bin/bash

set -e -u
set -o pipefail
set -f

MOUNT=/mnt/disk
IMAGE=~/workspace/image/image.s2e
LOGDIR=~/workspace/image/out/s2e-last

[ $# -eq 1 ] && LOGDIR=$1

LOG=${LOGDIR}/messages.txt
PCOUT=${LOGDIR}/pcs.txt
FOUT=${LOGDIR}/funcs.txt

# Args: elf_file
# Out:  /path/to/elf_file load_addr
get_loc()
{
	line=$(grep 'r-xp' ${LOG} | grep ${1} | tail -n 1)
	[ -z "${line}" ] && return 0

	words=(${line})

	path=${words[12]}

	if [ -z "${path##*lib*}" ]; then
		addr=${words[7]}
		addr=${addr%-*}
		addr="0x${addr}"
	else
		addr='0x0'
	fi

	echo "${path} ${addr}"
}

# Args: /path/to/elf_file instruction_offset
# Out:  function_name line_number
get_func_name()
{
	out=$(addr2line -f -e ${MOUNT}/${1} ${2} 2>/dev/null | tr '\n' ' ')
	[ -z "${out}" ] && return 0

	out=(${out})
	func=${out[0]}
	line=${out[1]##*/}

	echo "${func} ${line}"
}

mount_disk()
{
	sudo kpartx -v -a ${IMAGE} > /dev/null
	sudo mount -o,ro /dev/mapper/loop0p1 ${MOUNT}
}

unmount_disk()
{
	sudo umount ${MOUNT}
	sudo kpartx -d ${IMAGE} > /dev/null
}

truncate -s 0 ${PCOUT}
truncate -s 0 ${FOUT}

echo 'Making list of PCs'

LOGSIZE=$(stat -c %s ${LOG})
cat ${LOG} \
	| pv -p -w 32 -s ${LOGSIZE} \
	| grep 'MemSafety: Unbounded' \
	| grep -v 'write to .*: 0x8 above stack bound' \
	| awk '{print $7, $9}' \
	| sort \
	| uniq -c \
	| sort -h -r \
	> ${PCOUT}

echo 'Making list of functions'

PCCNT=$(wc -l < ${PCOUT})

echo 'Mounting disk'
mount_disk

declare -A LOC
FCNT=0

while read -r line; do
	words=(${line})

	cnt=${words[0]}
	addr=${words[1]}
	file=${words[2]}
	file=${file#*\'}
	file=${file%\'*}
	file=${file#*:}

	set +u
	loc=(${LOC[${file}]})
	set -u

	if [ ${#loc[@]} -ne 2 ]; then
		ldfile=${file}
		[ ${file} = 'libdl.so.2' ] && ldfile='libdl-2.13.so'
		[ ${file} = 'libc.so.6' ] && ldfile='libc-2.13.so'
		LOC[${file}]=$(get_loc ${ldfile})
		loc=(${LOC[${file}]})
		if [ ${#loc[@]} -ne 2 ]; then
			echo Failed to get location for ${file}
			unmount_disk
			exit 1
		fi
	fi

	offset=$(printf '0x%x' $((${addr} - ${loc[1]})))
	func=$(get_func_name ${loc[0]} ${offset})
	if [ -z "${func}" ]; then
		func='???'
		line='???'
	else
		func=(${func})
		line=${func[1]}
		func=${func[0]}
	fi

	printf '%6i %20s %-20s %20s (PC %s offset %s)\n' \
		${cnt} ${file} "${func}" "${line}" ${addr} ${offset} >> ${FOUT}

	chars=$(( ( ${FCNT} + 1 ) * 25 / ${PCCNT} ))
	spaces=$(( 25 - ${chars} ))
	cstr=$(printf "%${chars}s")
	sstr=$(printf "%${spaces}s")
	echo -en "\r[${cstr// /.}${sstr}] "
	FCNT=$(( ${FCNT} + 1 ))
done < ${PCOUT}
echo

sort -h -r ${FOUT} -o ${FOUT}

echo 'Unmounting disk'
unmount_disk

echo "---"
head -n 25 ${FOUT}

