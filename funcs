#!/bin/bash

set -e -u

LOG=~/workspace/image/out/s2e-last/messages.txt
BIN=~/workspace/image/bin
PCOUT=~/workspace/image/out/s2e-last/pcs.txt
FOUT=~/workspace/image/out/s2e-last/funcs.txt

# Args: file
get_load_addr()
{
	line=$(grep 'r-xp' ${LOG} | grep ${1} | tail -n 1)
	[ -z "${line}" ] && return 0

	words=(${line})

	addr=${words[7]}
	addr=${addr%-*}
	addr="0x${addr}"

	echo $addr
}

# Args: file offset
get_func_name()
{
	if [ ${2} = 'unknown' ]; then echo 'unknown'; return 0; fi
	addr2line -f -e ${BIN}/${1} ${2} 2>/dev/null | head -n 1
}

truncate -s 0 ${PCOUT}
truncate -s 0 ${FOUT}

echo 'Making list of PCs'

grep 'MemSafety: Unbounded' ${LOG} | awk '{print $7, $9}' | sort | uniq -c | sort -h -r > ${PCOUT}
PCCNT=$(wc -l < ${PCOUT})
echo ${PCCNT} unique PCs

declare -A LDADDR
FCNT=0

while read -r line; do
	words=(${line})

	cnt=${words[0]}
	addr=${words[1]}
	file=${words[2]}
	file=${file#*\'}
	file=${file%\'*}
	file=${file#*:}
	[ ${file} = 'libc.so.6' ] && file='libc-2.13.so'

	set +u
	has_ldaddr='yes'
	[ -v ${LDADDR[${file}]} ] && has_ldaddr='no'
	set -u

	if [ ${has_ldaddr} = 'no' ]; then
		LDADDR[${file}]=$(get_load_addr ${file})
		[ -z ${LDADDR[${file}]} ] && ( echo Failed to get load addr for ${file}; exit 1 )
	fi

	offset=$(printf '0x%x' $((${addr} - ${LDADDR[${file}]})))

	func=$(get_func_name ${file} ${offset})
	[ -z ${func} ] && ( echo Failed to get function name for ${file}:${addr}; continue )

	echo "${cnt} ${file} ${func} (PC ${addr} offset ${offset})" >> ${FOUT}

	chars=$(( ${FCNT} * 25 / ${PCCNT} ))
	spaces=$(( 25 - ${chars} ))
	cstr=$(printf "%${chars}s")
	sstr=$(printf "%${spaces}s")
	echo -en "\r[${cstr// /.}${sstr}]"
	FCNT=$(( ${FCNT} + 1 ))
done < ${PCOUT}
echo

sort -h -r ${FOUT} -o ${FOUT}

echo "---"
head -n 25 ${FOUT}

