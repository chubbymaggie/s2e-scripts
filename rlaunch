#!/bin/bash
#
# Usage:
#  rlaunch kvm                   Run kvm
#  rlaunch mon                   Run qemu
#  rlaunch s2e [QEMU_ARGS]       Run s2e-qemu
#  rlaunch s2e-gdb [QEMU_ARGS]   Run s2e-qemu in GDB
# 

set -e -u

HOST='dslab-vader1.epfl.ch'
QPORT=4444
VNC=7
GDB=

if [ $# -ge 1 ]; then
	TYPE=$1
	shift
else
	echo 'Invalid arguments'
	exit 1
fi

QARGS=
QARGS+=" -m 1G"
QARGS+=" -serial file:serial.txt"
QARGS+=" -monitor telnet:${HOST}:${QPORT},server,nowait"
QARGS+=" -vnc :${VNC}"

case ${TYPE} in
	kvm)
		QEMU="qemu-system-i386"
		QARGS+=" -drive file=\${IMAGE}/image.raw.s2e"
		QARGS+=" -enable-kvm"
		QARGS+=" -net nic,model=pcnet -net user"
		;;
	mon)
		QEMU="\${BUILD}/qemu-release/i386-softmmu/qemu-system-i386"
		QARGS+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		QARGS+=" -net none"
		;;
	s2e|s2e-gdb)
		QEMU="\${BUILD}/qemu-release/i386-s2e-softmmu/qemu-system-i386"
		QARGS+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		QARGS+=" -net none"
		QARGS+=" -s2e-config-file \${IMAGE}/s2e-config.lua"
		QARGS+=" -loadvm ready"
		QARGS+=" $*"
		if [ ${TYPE} == 's2e-gdb' ]; then
			VNCDELAY=6
			GDB+="truncate -s0 gdb.cfg                   &&"
			GDB+="echo 'handle SIG38 noprint' >> gdb.cfg &&"
			GDB+="echo 'run'                  >> gdb.cfg &&"
			GDB+="gdb -x gdb.cfg --args"
		fi
		;;
	*)
		echo 'Invalid arguments'; exit 1
		;;
esac

close_qemu()
{
	trap - INT

	expect <<-EOF
		set send_slow {1 .01}
		spawn telnet ${HOST} ${QPORT}
		expect {
			"(qemu) "
		}
		send -s "q\n\n"
		send_user "\n"
	EOF
}

SHCMD=
SHCMD+="for i in {0..19}; do"
SHCMD+=" echo 'Connecting to VNC...';"
SHCMD+=" gvncviewer ${HOST}:${VNC} 2>/dev/null | grep 'Connected' >/dev/null && break;"
SHCMD+=" sleep 0.5;"
SHCMD+="done"

SSHCMD=
SSHCMD+="export IMAGE=\${HOME}/workspace/image &&"
SSHCMD+="export BUILD=\${HOME}/workspace/build &&"
SSHCMD+="export S2E_PAYLOAD=\${IMAGE}          &&"
SSHCMD+="export WINDOWS_FS=\${IMAGE}/guestfs   &&"
SSHCMD+="mkdir -p \${IMAGE}/out                &&"
SSHCMD+="cd \${IMAGE}/out                      &&"
SSHCMD+="${GDB} ${QEMU} ${QARGS}"

bash -c "${SHCMD}" &
SHPID=$!

trap close_qemu INT

ssh ${HOST} "${SSHCMD}" || kill ${SHPID}

