#!/bin/bash
#
# Usage:
#  rlaunch kvm                   Run kvm
#  rlaunch kvm-cp                Run kvm with a copy of disk image
#  rlaunch qemu                  Run qemu
#  rlaunch s2e [QEMU_ARGS]       Run s2e-qemu
#  rlaunch s2e-gdb [QEMU_ARGS]   Run s2e-qemu in GDB
# 

set -e -u

#
#
#

HOST='dslab-vader1.epfl.ch'

# telnet port for qemu monitor
QPORT=4444

# VNC display number
VNC=7

#
#
#

# set up environment
CMD=
CMD+="export IMAGE=\${HOME}/workspace/image &&"
CMD+="export BUILD=\${HOME}/workspace/build &&"
CMD+="export S2E_PAYLOAD=\${IMAGE}          &&"
CMD+="export WINDOWS_FS=\${IMAGE}/guestfs   &&"
CMD+="mkdir -p \${IMAGE}/out                &&"
CMD+="cd \${IMAGE}/out                      &&"

if [ $# -eq 0 ]; then echo 'You have to specify target type'; exit 1; fi
TYPE=$1; shift
case ${TYPE} in
	kvm|kvm-cp)
		CMD+=" qemu-system-i386"
		CMD+=" -enable-kvm"
		CMD+=" -net nic,model=pcnet -net user"
		if [ ${TYPE} == 'kvm' ]; then
			CMD+=" -drive file=\${IMAGE}/image.raw.s2e"
		else
			CMD+=" -drive file=\${IMAGE}/image.raw.s2e.copy"
		fi
		;;
	qemu)
		CMD+=" \${BUILD}/qemu-release/i386-softmmu/qemu-system-i386"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		CMD+=" -net none"
		;;
	s2e|s2e-gdb)
		if [ ${TYPE} == 's2e-gdb' ]; then
			CMD+="truncate -s0 gdb.cfg                   &&"
			CMD+="echo 'handle SIG38 noprint' >> gdb.cfg &&"
			CMD+="echo 'run'                  >> gdb.cfg &&"
			CMD+="gdb -x gdb.cfg --args"
		fi
		CMD+=" \${BUILD}/qemu-release/i386-s2e-softmmu/qemu-system-i386"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		CMD+=" -net none"
		CMD+=" -s2e-config-file \${IMAGE}/s2e-config.lua"
		CMD+=" -loadvm ready"
		CMD+=" $*"
		;;
	*)
		echo 'Invalid target type'; exit 1
		;;
esac

# add common qemu options
CMD+=" -m 1G"
CMD+=" -serial file:serial.txt"
CMD+=" -monitor telnet:${HOST}:${QPORT},server,nowait"
CMD+=" -vnc :${VNC} -usbdevice tablet"

close_qemu()
{
	trap - INT

	expect <<-EOF
		set send_slow {1 .01}
		log_user 0
		spawn telnet ${HOST} ${QPORT}
		expect {
			"(qemu) "
		}
		send -s "q\n\n"
		send_user "\n"
	EOF
}

# VNC connection loop
VNCLOOP=
VNCLOOP+="for i in {0..19}; do"
VNCLOOP+=" echo 'Connecting to VNC...';"
VNCLOOP+=" ssh ${HOST} 'netstat -lnt' | grep $((5900+${VNC})) > /dev/null && break;"
VNCLOOP+=" sleep 0.5;"
VNCLOOP+="done;"
VNCLOOP+="vncviewer ${HOST}:${VNC} >/dev/null 2>&1;"

#
#
#

# start VNC connection loop
bash -c "${VNCLOOP}" &
VNCLOOP_PID=$!

# quit qemu on Ctrl+C
trap close_qemu INT

# launch qemu on remote host
ssh ${HOST} "${CMD}" || true

# kill VNC connection loop
kill ${VNCLOOP_PID} 2>/dev/null || true

